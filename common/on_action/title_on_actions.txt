#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	effect = {
		## AVE MARIA
		## Making sure roman landless title do not disappear
		if = {
			limit = {
				scope:landed_title = {
					roman_administration_is_a_tagma_title_trigger = yes
				}
			}
			title:e_byzantium.holder = {
				create_character = {
					employer = title:e_byzantium.holder
					template = tagma_commander_character
					save_scope_as = new_title_holder
				}
				scope:landed_title = {
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_title_holder = {
						holder = scope:new_title_holder
						change = scope:change
					}
					scope:new_title_holder = {
						change_liege = {
							liege = title:e_byzantium.holder
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					add_title_law = ave_maria_roman_administration_tagma_succession_law
					add_title_law = male_only_law
				}
				scope:new_title_holder = {
					change_government = roman_administration_military_government
				}
			}
		}
		## Making sure roman landless title do not disappear
		if = {
			limit = {
				scope:landed_title = {
					roman_administration_is_a_high_administrative_office_title = yes
				}
			}
			title:e_byzantium.holder = {
				create_character = {
					employer = title:e_byzantium.holder
					template = bureaucrat_character
					save_scope_as = new_title_holder
				}
				scope:landed_title = {
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_title_holder = {
						holder = scope:new_title_holder
						change = scope:change
					}
					scope:new_title_holder = {
						change_liege = {
							liege = title:e_byzantium.holder
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					add_title_law = ave_maria_roman_administration_tagma_succession_law
					add_title_law = male_only_law
				}
				scope:new_title_holder = {
					change_government = roman_administration_sekreton_government
				}
			}
		}

		## Making sure Islamic empire landless titles do not disappear
		if = {
			limit = {
				scope:landed_title = {
					is_target_in_global_variable_list = {
						name = islamic_empire_faction_influence_title
						target = scope:landed_title
					}
					OR = {
						this = title:d_regiment_abid
						this = title:d_regiment_ghilman_turks
					}
				}				
			}			
				
			title:e_egypt.holder = {
				create_character = {
					employer = title:e_egypt.holder 
					template = islamic_empire_ghulam_character
					save_scope_as = new_title_holder
				}
				scope:landed_title = {
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_title_holder = {
						holder = scope:new_title_holder
						change = scope:change
					}
					scope:new_title_holder = {
						change_liege = {
							liege = title:e_egypt.holder 
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					scope:new_title_holder = {
						change_government = islamic_empire_regiment_government
						primary_title = {
							add_title_law = islamic_empire_amir_succession_law	
							add_title_law = male_only_law
						}
					}
					
				}
				# scope:landed_title = {
				# 	add_title_law = islamic_empire_amir_succession_law
				# 	add_title_law = male_only_law
				# }
				
			}
		}
		## Making sure Islamic empire landless titles do not disappear
		if = {
			limit = {
				scope:landed_title = {
					is_target_in_global_variable_list = {
						name = islamic_empire_faction_influence_title
						target = scope:landed_title
					}
					OR = {
						this = title:d_fatimid_diwan_al_insha
						this = title:d_fatimid_diwan_al_barid
						this = title:d_fatimid_diwan_al_jays
						this = title:d_fatimid_diwan_al_iqta
						this = title:d_fatimid_diwan_al_karaj
						this = title:d_fatimid_diwan_al_rawatib
					}
				}				
			}
			title:e_egypt.holder = {
				create_character = {
					employer = title:e_egypt.holder 
					template = bureaucrat_character
					save_scope_as = new_title_holder
				}
				scope:landed_title = {
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_title_holder = {
						holder = scope:new_title_holder
						change = scope:change
					}
					scope:new_title_holder = {
						change_liege = {
							liege = title:e_egypt.holder 
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					scope:new_title_holder = {
						change_government = islamic_empire_diwan_government
					}
					add_title_law = islamic_empire_diwan_succession_law
					add_title_law = male_only_law
				}
				
			}
		}
	}
	events = {
		british_isles.1031	# Danelaw-England partition calc.
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {
		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				has_government = holy_order_government
			}
			add_trait = order_member
		}

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		
		
		#############################################
		# AVE MARIA EFFECTS							#
		#############################################

		## OPUS RURALIUM COMMODORUM EFFECT
		root = {
			if = {
				limit = {
					is_landed = yes
				}
				trigger_event = { 
					id = ave_maria_opus_ruralium_commodorum.0002
					delayed = yes 
				}
			}
			
		}		
		if = {
			limit = {
				exists = scope:previous_holder
			}
			scope:previous_holder = {
				if = {
					limit = {
						exists = this
						is_landed = yes
						is_alive = yes
					}
					trigger_event = { 
						id = ave_maria_opus_ruralium_commodorum.0002
						delayed = yes 
					}
				}
			}
		}
		
		
		# ## ROMAN ADMINISTRATION EFFECTS
		# ## INHERITING E_BYZANTIUM
		if = {
			limit = {
				scope:title = { this = title:e_byzantium }
			}
			root = {
				roman_administration_accession_to_basileus_effect = yes		
				if = {
					limit = {
						scope:previous_holder = {
							is_alive = yes
						}
					}
					## Nice eyes and balls you got there
					trigger_event = ave_maria_roman_administration_legitimacy_events.0001
					## Say goodbye to all your "friends"
					scope:previous_holder = {
						every_relation = {
							type = protospatharios
							scope:previous_holder = {
								remove_relation_protospatharios = prev
							}
						}
						every_relation = {
							type = patrikios
							scope:previous_holder = {
								remove_relation_patrikios = prev
							}
						}
						every_relation = {
							type = anthypatos
							scope:previous_holder = {
								remove_relation_anthypatos = prev
							}
						}
						every_relation = {
							type = magistros
							scope:previous_holder = {
								remove_relation_magistros = prev
							}
						}
						every_relation = {
							type = vestarches
							scope:previous_holder = {
								remove_relation_vestarches = prev
							}
						}
						every_relation = {
							type = proedros
							scope:previous_holder = {
								remove_relation_proedros = prev
							}
						}
						every_relation = {
							type = spatharios
							scope:previous_holder = {
								remove_relation_spatharios = prev
							}
						}
						every_relation = {
							type = junior_emperor
							scope:previous_holder = {
								remove_relation_junior_emperor = prev
							}
						}
					}
				}
				## Giving the Basileus focus to the AI so they don't dick around without a focus
				if = {
					limit = {
						is_ai = yes
					}
					random_list = {
						34 = {
							set_focus = basileus_lifestyle_rulership_focus
							modifier = {
								add = 50
								OR = {
									has_trait = education_diplomacy_1
									has_trait = education_diplomacy_2
									has_trait = education_diplomacy_3
									has_trait = education_diplomacy_4
									has_trait = education_stewardship_1
									has_trait = education_stewardship_2
									has_trait = education_stewardship_3
									has_trait = education_stewardship_4
								}
							}
						}
						33 = {
							set_focus = basileus_lifestyle_military_focus
							modifier = {
								add = 50
								OR = {
									has_trait = education_martial_1
									has_trait = education_martial_2
									has_trait = education_martial_3
									has_trait = education_martial_4
									has_trait = education_martial_prowess_1
									has_trait = education_martial_prowess_2
									has_trait = education_martial_prowess_3
									has_trait = education_martial_prowess_4
								}
							}
						}
						33 = {
							set_focus = basileus_lifestyle_scholarship_focus
							modifier = {
								add = 50
								OR = {
									has_trait = education_learning_1
									has_trait = education_learning_2
									has_trait = education_learning_3
									has_trait = education_learning_4
								}
							}
						}
					}
				}
			}
			scope:previous_holder = {
				if = {
					limit = {
						is_alive = yes
					}
					remove_trait = basileus
					remove_trait = junior_emperor
					roman_administration_remove_salary_indicator = yes
					roman_administration_remove_salary_cost_modifier = yes
					every_relation = {
						type = junior_emperor
						remove_trait = junior_emperor
					}
				}
			}
		}
		## INHERITING AN ADMINISTRATIVE TITLE
		## Checking that it is an duchy tier title from a valid character using administrative title type
		if = {
			limit = {
				root = {
					roman_administration_character_is_in_the_empire = yes
					#uses_roman_govt = yes
					NOT = { any_held_title = { this = title:e_byzantium } }
				}
				# scope:previous_holder = {
				# 	roman_administration_character_is_in_the_empire = yes
				# }
				scope:title = {
					tier = tier_duchy
					NOT = { this = title:e_byzantium }
				}
			}
			## Inheriting the counties from the inherited duchy			
			scope:title = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						NOT = { 
							this = { has_title_law = ave_maria_roman_administration_family_succession_law }
							has_title_law = ave_maria_roman_administration_family_succession_law							
						}
						NOT = { this = title:c_byzantion }
						holder = {
							roman_administration_character_is_in_the_empire = yes
						}
					}
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_title_holder = {
						holder = root
						change = scope:change
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Giving away counties from another duchy that are not familial holdings if you had some
			# root = {
				# if = {
					# limit = {
						# any_held_title = {
							# tier = tier_county
							# NOT = { 
								# this = { has_title_law = ave_maria_roman_administration_family_succession_law }
								# has_title_law = ave_maria_roman_administration_family_succession_law							
							# }
							# NOT = {
								# any_this_title_or_de_jure_above = {
									# this = scope:title
								# }
							# }
						# }
					# }
					# every_held_title = {
						# limit = {
							# tier = tier_county
							# NOT = { 
								# this = { has_title_law = ave_maria_roman_administration_family_succession_law }
								# has_title_law = ave_maria_roman_administration_family_succession_law							
							# }
							# NOT = {
								# any_this_title_or_de_jure_above = {
									# this = scope:title
								# }
							# }
						# }
						# if = {
							# limit = {
								# de_jure_liege = {
									# tier = tier_duchy
									# holder = {
										# roman_administration_character_is_in_the_empire = yes
									# }							
								# }
							# }
							# de_jure_liege = {
								# holder = {
									# save_scope_as = new_holder
								# }							
							# }
							# create_title_and_vassal_change = {
								# type = granted
								# save_scope_as = change
								# add_claim_on_loss = yes
							# }
							# change_title_holder = {
								# holder = scope:new_holder
								# change = scope:change
							# }
							# resolve_title_and_vassal_change = scope:change
						# }
						
					# }
				# }				
			# }
			
			## Starting the terms of office event chain - removed
			## Triggering the appointment events
			root = {
				if = {
					limit = {
						has_character_modifier = roman_administration_emperor_favourite
					}
					remove_character_modifier = roman_administration_emperor_favourite
				}				
				## Saving root scope as new_holder for the events
				save_scope_as = new_holder
				## triggering the event for the liege, the new holder (the event to previous holder is triggered in the liege event for scope saving purposes)
				liege = {
					trigger_event = { id = ave_maria_roman_administration_officials_nomination_events.0001 }
				}
				if = {
					limit = {
						scope:new_holder.primary_title = {
							tier >= tier_duchy
							tier <= tier_kingdom
						}
					}
					trigger_event = { 
						id = ave_maria_roman_administration_officials_nomination_events.0005 
						# days = 1 
					}
				}			
				
			}
			
			if = {
				limit = {
					exists = scope:previous_holder
				}
				scope:previous_holder = {
					if = {
						limit = {
							is_alive = yes
						}
						remove_character_modifier = roman_administration_high_official_salary
					}
				}
			}
			

			if = {
				limit = {
					uses_roman_govt = yes
				}
				add_character_modifier = {
					modifier = roman_administration_new_office
					days = 180
				}
			}
			

			change_government = roman_administration_theme_government

			## Changing government
			if = {
				limit = {
					scope:title = {
						roman_administration_is_a_tagma_title_trigger = yes
					}
				}
				root = {
					change_government = roman_administration_military_government
				}
			}
			if = {
				limit = {
					scope:title = {
						roman_administration_is_a_high_administrative_office_title = yes
					}
				}
				root = {
					change_government = roman_administration_sekreton_government
				}
			}
			if = {
				limit = {
					scope:title = {
						has_variable = roman_administration_doukaton_title
					}
				}
				root = {
					change_government = roman_administration_doukaton_government
				}
			}
			if = {
				limit = {
					scope:title = {
						has_variable = roman_administration_kouratoreia_title
					}
				}
				root = {
					change_government = roman_administration_kouratoreia_government
				}
			}

			every_courtier = {
				limit = {
					is_female = no
					age >= 20
				}
				add_unpressed_claim = scope:title
			}
		}

		## CHECKING IF YOU ARE NOT ADMINISTRATIVE AND IN THE EMPIRE
		# if = {
		# 	limit = {
		# 		root = {
		# 			roman_administration_character_is_in_the_empire = yes
		# 		}
		# 		scope:title = {
		# 			## is the title in th eproper list
		# 			NOT = {

		# 			}
		# 		}
		# 	}
		# 	change_government = 
		# }

		## Event for the Emperor when he gets a duchy title so he can redistribute it
		if = {
			limit = {
				scope:title = {
					tier >= tier_duchy
					tier <= tier_kingdom
				}
				root = {
					any_held_title = {
						this = title:e_byzantium
					}
				}
			}
			trigger_event = ave_maria_roman_administration_reconquest_events.0001
		}

		## Removing roman vassal
		if = {
			limit = {
				root = {
					uses_roman_govt = no
					highest_held_title_tier >= tier_duchy 
					any_vassal = {
						uses_roman_govt = yes
					}
				}
			}
			every_vassal = {
				limit = {
					uses_roman_govt = yes
				}
				change_government = feudal_government
				if = {
					limit = {
						highest_held_title_tier >= tier_duchy
						any_held_title = {
							has_title_law = ave_maria_roman_administration_tagma_succession_law
						}
					}
					every_held_title = {
						limit = {
							has_title_law = ave_maria_roman_administration_tagma_succession_law
						}
						remove_title_law = ave_maria_roman_administration_tagma_succession_law
					}
				}
			}
		}


		### ISLAMIC EMPIRE EFFECTS
		## Getting the capital of the new duchy for amirs
		if = {
			limit = {
				root = {
					uses_islamic_empire_govt = yes
				}		
				liege = {
					uses_islamic_empire_govt = yes
					highest_held_title_tier = tier_empire
				}
				scope:title = {
					tier >= tier_duchy
					NOR = {
						has_variable = abid_regiment
						has_variable = berber_regiment
						has_variable = turkish_ghulam_regiment
					}
				}		
			}
			root = {
				liege = {
					save_scope_as = current_liege
				}
				
				create_character = {
					employer = root
					template = islamic_empire_ghulam_character
				}
				create_character = {
					employer = root
					template = islamic_empire_ghulam_character
				}
				create_character = {
					employer = root
					template = islamic_empire_ghulam_character
				}
				every_courtier = {
					limit = {
						is_female = no
						age >= 20
						OR = {
							has_trait = ghulam
							martial >= 12
						}						
					}
					add_unpressed_claim = scope:title
				}
			}
			scope:title = {
				title_capital_county = {
					if = {
						limit = {
							NOT = { 
								this = { has_title_law = ave_maria_roman_administration_family_succession_law }
								has_title_law = ave_maria_roman_administration_family_succession_law							
							}
							holder = {
								any_liege_or_above = {
									this = scope:current_liege
								}
							}
						}
						create_title_and_vassal_change = {
							type = granted
							save_scope_as = change
							add_claim_on_loss = yes
						}
						change_title_holder = {
							holder = root
							change = scope:change
						}
						resolve_title_and_vassal_change = scope:change
					}
					
				}
			}
		}
		## Amir independency tendency modifier and events
		if = {
			limit = {
				root = {
					has_government = islamic_empire_government
					highest_held_title_tier < tier_empire
					is_independent_ruler = no 
					liege = {
						has_government = islamic_empire_government
						highest_held_title_tier = tier_empire
					}
				}
			}
			root = {
				add_character_modifier = {
					modifier = islamic_empire_newly_appointed_amir
					days = 730
				}
				trigger_event = {
					id = ave_maria_amir_events.0001
					days = 731
				}
			}
		}

		## Assigning asabiyya variable to titles when they are inherited
		if = {
			limit = {
				scope:title = {
					NOT = {
						has_variable = islamic_empire_asabiyya
					}					
					holder = {
						OR = {
							has_government = clan_government
							has_government = tribal_government
						}						
						religion = religion:islam_religion
						primary_title = {
							this = scope:title
						}
					}
				}
			}
			scope:title = {
				set_variable = {
					name = islamic_empire_asabiyya
					value = 100
				}
			}
			root = { add_to_global_variable_list = { name = islamic_empire_asabiyya_title_holder target = this } }
		}
		if = {
			limit = {
				scope:title = {
					has_variable = islamic_empire_asabiyya
				}
				NOT = {
					is_target_in_global_variable_list = {
						name = islamic_empire_asabiyya_title_holder
						target = root
					}
				}
			}
			root = { add_to_global_variable_list = { name = islamic_empire_asabiyya_title_holder target = this } }
		}
		## Changing government when asabiyya is too low
		if = {
			limit = {
				scope:title = {
					has_variable = islamic_empire_asabiyya 
					var:islamic_empire_asabiyya <= 0
					holder = {
						primary_title = {
							this = scope:title
						}
					}
				}
			}
			change_government = islamic_empire_government
			every_vassal = {
				limit = {
					primary_title = {
						has_variable = islamic_empire_asabiyya 
						var:islamic_empire_asabiyya <= 0
					}
				}
				change_government = islamic_empire_government
			}
		}

		## Caliph effect - Allying vassal berber regiment
		if = {
			limit = {
				scope:title = {
					tier = tier_empire
				}
				root = {
					uses_islamic_empire_govt = yes
				}
			}
			## 
			if = {
				limit = {
					scope:title = { this = title:e_egypt }
				}
				root = { add_character_modifier = islamic_empire_multiethnic_army_system }
			}
			## Allying clan vassal
			every_vassal = {
				limit = {
					has_government = clan_government
				}
				create_alliance = {
					target = prev
					allied_through_owner = prev
					allied_through_target = prev
				}
				prev = { # This opinion modifier controls the interaction, and is removed when breaking the alliance in any way (though on_actions)
					add_opinion = {
						modifier = perk_negotiated_alliance_opinion
						target = root
					}
				}
			}
		}

		## Getting courtiers claim to the title
		if = {
			limit = {
				scope:title = {
					is_target_in_global_variable_list = {
						name = islamic_empire_faction_influence_title
						target = scope:title
					}
				}
			}
			root = {
				## giving courtiers for title inheritance
				every_courtier = {
					limit = {
						is_male = yes
						is_adult = yes
						age >= 20
					}
					add_unpressed_claim = scope:title
				}
			}
		}
		

		### AVE MARIA CHRISTIAN FLAVOUR EFFECTS
		## Giving the pope the pope trait
		if = {
			limit = {
				scope:title = {
					this = title:k_papal_state
				}
			}
			root = {
				add_trait = pope
			}
		}
		## Giving bishops a special trait to prevent them from marrying
		if = {
			limit = {
				scope:title = {
					NOT = { this = title:k_papal_state }
				}
				has_government = theocracy_government
				religion = religion:christianity_religion
				highest_held_title_tier = tier_duchy
			}
			add_trait = bishop
		}

		## Feodum - make independent
		if = {
			limit = {
				exists = global_var:feodum_test
				highest_held_title_tier >= tier_duchy
				has_government = feudal_government 
			}
			primary_title = {
				save_temporary_scope_as = liege_title
				add_to_variable_list = {
					name = realm_titles
					target = this
				}
			}
			every_vassal = {
				every_held_title = {
					limit = {
						tier >= tier_county
					}
					scope:liege_title = {
						add_to_variable_list = {
							name = realm_titles
							target = prev
						}
					}				
				}
			}
			primary_title = {
				ordered_in_list = {
					list = realm_titles
					order_by = realm_title_hierarchy
				}
			}
			
			every_vassal = {
				create_alliance = {
					target = root
					allied_through_owner = this
					allied_through_target = root
				}
				this = { # This opinion modifier controls the interaction, and is removed when breaking the alliance in any way (though on_actions)
					add_opinion = {
						modifier = perk_negotiated_alliance_opinion
						target = prev
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
				
				every_vassal = {
					create_alliance = {
						target = prev
						allied_through_owner = this
						allied_through_target = prev
					}
					this = { # This opinion modifier controls the interaction, and is removed when breaking the alliance in any way (though on_actions)
						add_opinion = {
							modifier = perk_negotiated_alliance_opinion
							target = prev
						}
					}
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					becomes_independent = { change = scope:change }
					resolve_title_and_vassal_change = scope:change
				}
			}
		}

		## Feodum - checks when you inherit a title if this is a vassal title and allies you to your liege
		if = {
			limit = {
				exists = global_var:feodum_test
				scope:title = {
					## Initial code
					has_variable = feodum_liege_title
					## end Initial code
				}
			}
			scope:title = {
				## Initial code that works by "variabling" each vassal title and then checking if they have the variable then allying the liege saved from the variable
				var:feodum_liege_title = {
					holder = {
						save_scope_as = feodum_liege
					}
				}
				if = {
					limit = {
						root = {
							tier_difference = {
								target = scope:feodum_liege
								value < 0
							}
						}
					}
					holder = {
						create_alliance = {
							target = scope:feodum_liege
							allied_through_owner = this
							allied_through_target = scope:feodum_liege
						}
						add_opinion = {
							modifier = perk_negotiated_alliance_opinion
							target = scope:feodum_liege
						}
					}
				}
				## end Initial code
				
				
			}
			
		}
		
		## Feodum - checks if the title is a liege title and ally you with the vassals of the title
		if = {
			limit = {
				exists = global_var:feodum_test
				scope:title = {
					has_variable_list = realm_titles
				}				
			}
			
			scope:title = {
				##New test
				every_in_list = {
					variable = realm_titles
					limit = {
						NOT = {
							this = scope:title
							holder = {
								this = root
							}
						}
					}
					holder = {
						if = {
							limit = {
								tier_difference = {
									target = root
									value < 0
								}
							}
							create_alliance = {
								target = root
								allied_through_owner = this
								allied_through_target = root
							}
							add_opinion = {
								modifier = perk_negotiated_alliance_opinion
								target = root
							}
						}
						
					}
				}
			}
			
		}
		
	}
	events = {
		roman_restoration.0005		#New Roman Emperor gets Augustus trait. (old holder, if still alive, loses it)
		roman_restoration.0199		#Restoring the Pentarchy.
		religious_decision.0312		# Base game: new holder of a county with a runestone
		fp1_other_decisions.0113	# FP1: new holder of a county with a runestone
		coa.1						# check if title Coat of Arms should change.
		delay = { days = 1 }
		realm_maintenance.2001		#Big notification about inheriting emperor tier title
		british_isles.1032			# Danelaw-England partition calc.
		fp1_major_decisions.1011	# Harald Tanglehair becomes Harald Fairhair.
		fp1_major_decisions.1012	# If Norway has just been created for the first time, flag that.
	}
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
	}
	effect = {
		if = {
			limit = {
				scope:title = title:e_mongol_empire
				has_character_flag = gain_mongol_succession_dread
			}
			add_dread = 50
		}
	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	events = {
		british_isles.1033	# Danelaw-England partition calc.
	}

	## this below has been moved to events above as error log spazzes out
	effect = {
		#Earmark landless Scandinavians for adventuring.
		if = {
			limit = {
				#We only want to grab tribal cultures.
				culture = {
					NOT = { has_cultural_era_or_later = culture_era_early_medieval }
				}
				#Must have lost their last piece of land.
				is_landed = no
				#If they've ventured far outside Europe, they're unlikely to come back, so we don't #want them.
				scope:title = {
					tier = tier_county
					title_province = {
						OR = {
							geographical_region = world_europe
							geographical_region = world_asia_minor
						}
					}
				}
			}
			#Norse, Norwegians, & Danes go into the western adventurer list.
			if = {
				limit = {
					OR = {
						has_culture = culture:norse
						has_culture = culture:norwegian
						has_culture = culture:danish
					}
				}
				add_to_global_variable_list = {
					name = western_scandinavian_adventurer_list
					target = this
				}
			}
			#Norse & Swedes go into the eastern adventurer list.
			if = {
				limit = {
					OR = {
						has_culture = culture:norse
						has_culture = culture:swedish
					}
				}
				add_to_global_variable_list = {
					name = eastern_scandinavian_adventurer_list
					target = this
				}
			}
		}

		#Apply loss of stress to the Rivals
		if = {
			limit = {
				scope:title.tier >= tier_county
				OR = {
					scope:transfer_type = flag:conquest
					scope:transfer_type = flag:conquest_holy_war
					scope:transfer_type = flag:conquest_claim
					scope:transfer_type = flag:conquest_populist
					scope:transfer_type = flag:abdication
					scope:transfer_type = flag:usurped
					scope:transfer_type = flag:revoked
					scope:transfer_type = flag:faction_demand
				}
			}
			root = {
				save_scope_as = actor
			}
			every_relation ={
				type = rival

				send_interface_message = {
					type = event_generic_neutral
					title = msg_rival_dethroned
					left_icon = scope:actor
					right_icon = scope:title

					custom_tooltip = msg_rival_dethroned_desc

					stress_impact = { 
						base = medium_stress_loss
						vengeful = medium_stress_loss
					}
				}
			}
		}
		## AVE MARIA
		## Asabiyya title holder global list
		if = {
			limit = {
				scope:title = {
					has_variable = islamic_empire_asabiyya				
					holder = {
						OR = {
							has_government = clan_government
							has_government = tribal_government
						}						
						religion = religion:islam_religion
						primary_title = {
							NOT = {
								this = scope:title
							}							
						}
					}
				}
			}
			scope:title = {
				remove_variable = islamic_empire_asabiyya
			}
			root = { 
				if = {
					limit = {
						is_target_in_global_variable_list = {
							name = islamic_empire_asabiyya_title_holder
							target = root
						}
					}
					remove_list_global_variable = {
						name = islamic_empire_asabiyya_title_holder
						target = root
					}
				}
			}
		}

		if = {
			limit = {
				root = {
					OR = {
						has_character_modifier = islamic_empire_settled_amir
						has_character_modifier = islamic_empire_entrenched_amir
					}
					
				}
			}
			root = {
				remove_character_modifier = islamic_empire_settled_amir
				remove_character_modifier = islamic_empire_entrenched_amir
			}
		}
	}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
on_explicit_claim_gain = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_achievement_flag_effect = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Make a note of ranking up for stele purposes.
		if = {
			limit = {
				# DLC check.
				has_fp1_dlc_trigger = yes
				# Is the culture eligible?
				fp1_can_raise_stele_trigger = yes
				# Aaaaand, for balance reasons, were they landed already?
				exists = scope:title
			}
			set_variable = {
				name = recent_rank_increase
				value = root.primary_title
				years = 5
			}
		}
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_character_flag = {
			flag = make_suicide_available
			years = 5
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}

# A baron is found or created for a title, E.G., due to the player using the "Give to Low Noble" action
# No transfer type here; it's always a grant
# root = the baron
# scope:liege = the person who wanted them created
# scope:title = the barony
on_baron_found_or_created_for_title = {
	effect = {
		add_opinion = {
			target = scope:liege
			modifier = received_title_barony
		}
	}
}
